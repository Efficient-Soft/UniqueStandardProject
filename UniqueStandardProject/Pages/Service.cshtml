@page
@model UniqueStandardProject.Pages.ServiceModel
@{
    ViewData["Title"] = "Home Page";
}
<style>
    img {
        border-radius: 10px;
    }

    .center {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .dropdown{
        text-align:center;
        font-size: 20px;
        font-weight:bold;
    }

    select {
        padding: 10px;
        font-size: 16px;
    }

</style>

<!-- Service Start -->
<div class="container-xxl py-5">
    <div class="container">
        <div class="center">
            <div class="col-md-6">
                <div class="dropdown mt-3">
                    <a href="#" class="dropdown-toggle text-success" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Our Services</a>
                    <div class="dropdown-menu" id="dropdownMenu">
                    </div>
                </div>
                @*<select class="form-select" aria-label="Default select example" id="dropdownMenu">
                    <option selected>Please Select Service</option>
                </select>*@
            </div>
        </div>
        <div class="row">
            <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
                @* <h1 class="mb-3 mt-3">Our Services</h1> *@
                <h3 class="mb-3 mt-3" id="title"></h3>
            </div>
            <div class="row" id="service"></div>
            <div class="d-flex justify-content-center mt-4">
                <button id="prevPage" class="btn btn-primary me-2">Previous</button>
                <button id="nextPage" class="btn btn-primary">Next</button>
            </div>
        </div>
    </div>
</div>

<!-- Service End -->

<script>
    var url = 'api/products/serviceList';

    var item = document.getElementById('service');

    let allData = [];
    let currentPage = 1;
    const itemsPerPage = 9;

    // fetch(url)
    //     .then((res) => res.json())
    //     .then((response) => {
    //         console.log(response.data);
    //         if (response.success) {
    //             if (Array.isArray(response.data)) {
    //                 allData = response.data;
    //                 allData.sort((a, b) => a.sortOrder - b.sortOrder);
    //                 renderPage(currentPage);
    //             } else {
    //                 console.error('The data received is not an array.');
    //             }
    //         } else {
    //             console.error('Request was not successful.');
    //         }
    //     })
    //     .catch((error) => {
    //         console.error('Error fetching data:', error);
    //     });

    const renderPage = (page) => {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageData = allData.slice(startIndex, endIndex);
        generateHtml(pageData);
        updatePaginationButtons();
    };


    const generateHtml = (data) => {
        data.sort((a, b) => a.sortOrder - b.sortOrder);
        console.log(data);

        var serviceTitle = null;

        var html = ``;
        data.forEach((player) => {

            if (!serviceTitle) {
                serviceTitle = `<h3>${player.title}</h3>`;
            }

            html +=
                `
                    <div class="col-md-4 mb-5">
                    <div class="text-dark bg-light">
                    <img src=${player.img} class="ps-4 pe-4 pt-4 pb-4" alt="Card image cap" style="width:100%;height:250px;">
                    </div>
                    </div>
                    `;
        });

        document.getElementById('service').innerHTML = html;
        document.getElementById('title').innerHTML = serviceTitle;
    };

    const updatePaginationButtons = () => {
        const totalPages = Math.ceil(allData.length / itemsPerPage);
        document.getElementById('prevPage').disabled = currentPage === 1;
        document.getElementById('nextPage').disabled = currentPage === totalPages;
    };

    // Event Listeners for Pagination Buttons
    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderPage(currentPage);
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        const totalPages = Math.ceil(allData.length / itemsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            renderPage(currentPage);
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Function to fetch data from API
        async function fetchData() {
            try {
                const response = await fetch('api/products/serviceTitle'); // Replace with your API URL
                const res = await response.json();

                // Flatten the array
                const flattenedData = res.data.flat();

                // Filter unique titles
                const uniqueTitles = Array.from(new Set(flattenedData.map(item => item.title)))
                    .map(title => {
                        return flattenedData.find(item => item.title === title);
                    });

                populateDropdown(uniqueTitles);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        // Function to populate dropdown with data
        function populateDropdown(data) {
            const dropdownMenu = document.getElementById('dropdownMenu');
            dropdownMenu.innerHTML = ''; // Clear existing options
            data.forEach(item => {
                // const option = document.createElement('a');
                // option.value = item.id;
                // option.textContent = item.title;
                // dropdownMenu.appendChild(option);
                const option = document.createElement('a');
                option.href = '#';
                option.className = 'dropdown-item text-success';
                option.dataset.id = item.serviceId; // Use data-* attribute to store the ID
                option.textContent = item.title;
                dropdownMenu.appendChild(option);
            });

            // Add change event listener
            // dropdownMenu.addEventListener('change', function () {
            //     const selectedOption = dropdownMenu.options[dropdownMenu.selectedIndex];
            //     console.log('Selected:', selectedOption.textContent);
            //     PopulateService(selectedOption.textContent);
            // });

            // Add click event listener
            dropdownMenu.addEventListener('click', function (event) {
                if (event.target && event.target.matches('a.dropdown-item')) {
                    const selectedOption = event.target;
                    console.log('Selected:', selectedOption.textContent);
                    PopulateService(selectedOption.textContent);
                }
            });

        }

        // Fetch and populate dropdown on page load
        fetchData();

        function PopulateService(title) {
            fetch('api/products/getImage?title=' +title)
                .then((res) => res.json())
                .then((response) => {
                    console.log(response.data);
                    if (response.success) {
                        if (Array.isArray(response.data)) {
                            allData = response.data;
                            allData.sort((a, b) => a.sortOrder - b.sortOrder);
                            renderPage(currentPage);
                        } else {
                            console.error('The data received is not an array.');
                        }
                    } else {
                        console.error('Request was not successful.');
                    }
                })
                .catch((error) => {
                    console.error('Error fetching data:', error);
                });
        }
    });

</script>
